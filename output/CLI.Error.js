Ext.data.JsonP.CLI_Error({"tagname":"class","name":"CLI.Error","autodetected":{},"files":[{"filename":"Error.js","href":"Error.html#CLI-Error"}],"singleton":true,"members":[{"name":"ignore","tagname":"property","owner":"CLI.Error","id":"static-property-ignore","meta":{"static":true}},{"name":"handle","tagname":"method","owner":"CLI.Error","id":"static-method-handle","meta":{"static":true}},{"name":"raise","tagname":"method","owner":"CLI.Error","id":"static-method-raise","meta":{"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-CLI.Error","short_doc":"A helper class for the native JavaScript Error object that adds a few useful capabilities for handling\nerrors in an a...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/Error.html#CLI-Error' target='_blank'>Error.js</a></div></pre><div class='doc-contents'><p>A helper class for the native JavaScript Error object that adds a few useful capabilities for handling\nerrors in an application. When you use <a href=\"#!/api/CLI.Error\" rel=\"CLI.Error\" class=\"docClass\">CLI.Error</a> to <a href=\"#!/api/CLI.Error-static-method-raise\" rel=\"CLI.Error-static-method-raise\" class=\"docClass\">raise</a> an error from within any class that\nuses the Class System, the Error class can automatically add the source class and method from which\nthe error was raised. It also includes logic to automatically log the error to the console, if available,\nwith additional metadata about the error. In all cases, the error will always be thrown at the end so that\nexecution will halt.</p>\n\n<p><a href=\"#!/api/CLI.Error\" rel=\"CLI.Error\" class=\"docClass\">CLI.Error</a> also offers a global error <a href=\"#!/api/CLI.Error-static-method-handle\" rel=\"CLI.Error-static-method-handle\" class=\"docClass\">handling</a> method that can be overridden in order to\nhandle application-wide errors in a single spot. You can optionally <a href=\"#!/api/CLI.Error-static-property-ignore\" rel=\"CLI.Error-static-property-ignore\" class=\"docClass\">ignore</a> errors altogether,\nalthough in a real application it's usually a better idea to override the handling function and perform\nlogging or some other method of reporting the errors in a way that is meaningful to the application.</p>\n\n<p>At its simplest you can simply raise an error as a simple string from within any code:</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/CLI.Error-static-method-raise\" rel=\"CLI.Error-static-method-raise\" class=\"docClass\">CLI.Error.raise</a>('Something bad happened!');\n</code></pre>\n\n<p>If raised from plain JavaScript code, the error will be logged to the console (if available) and the message\ndisplayed. In most cases however you'll be raising errors from within a class, and it may often be useful to add\nadditional metadata about the error being raised.  The <a href=\"#!/api/CLI.Error-static-method-raise\" rel=\"CLI.Error-static-method-raise\" class=\"docClass\">raise</a> method can also take a config object.\nIn this form the <code>msg</code> attribute becomes the error description, and any other data added to the config gets\nadded to the error object and, if the console is available, logged to the console for inspection.</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('CLI.Foo', {\n    doSomething: function(option){\n        if (someCondition === false) {\n            <a href=\"#!/api/CLI.Error-static-method-raise\" rel=\"CLI.Error-static-method-raise\" class=\"docClass\">CLI.Error.raise</a>({\n                msg: 'You cannot do that!',\n                option: option,   // whatever was passed into the method\n                'error code': 100 // other arbitrary info\n            });\n        }\n    }\n});\n</code></pre>\n\n<p>If a console is available (that supports the <code>console.dir</code> function) you'll see console output like:</p>\n\n<pre><code>An error was raised with the following data:\noption:         Object { foo: \"bar\"}\n    foo:        \"bar\"\nerror code:     100\nmsg:            \"You cannot do that!\"\nsourceClass:   \"CLI.Foo\"\nsourceMethod:  \"doSomething\"\n\nuncaught exception: You cannot do that!\n</code></pre>\n\n<p>As you can see, the error will report exactly where it was raised and will include as much information as the\nraising code can usefully provide.</p>\n\n<p>If you want to handle all application errors globally you can simply override the static <a href=\"#!/api/CLI.Error-static-method-handle\" rel=\"CLI.Error-static-method-handle\" class=\"docClass\">handle</a> method\nand provide whatever handling logic you need. If the method returns true then the error is considered handled\nand will not be thrown to the browser. If anything but true is returned then the error will be thrown normally.</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/CLI.Error-static-method-handle\" rel=\"CLI.Error-static-method-handle\" class=\"docClass\">CLI.Error.handle</a> = function(err) {\n    if (err.someProperty == 'NotReallyAnError') {\n        // maybe log something to the application here if applicable\n        return true;\n    }\n    // any non-true return value (including none) will cause the error to be thrown\n}\n</code></pre>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static properties</h3><div id='static-property-ignore' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI.Error'>CLI.Error</span><br/><a href='source/Error.html#CLI-Error-static-property-ignore' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI.Error-static-property-ignore' class='name expandable'>ignore</a> : Boolean<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Static flag that can be used to globally disable error reporting to the browser if set to true\n(defaults to false). ...</div><div class='long'><p>Static flag that can be used to globally disable error reporting to the browser if set to true\n(defaults to false). Note that if you ignore Ext errors it's likely that some other code may fail\nand throw a native JavaScript error thereafter, so use with caution. In most cases it will probably\nbe preferable to supply a custom error <a href=\"#!/api/CLI.Error-static-method-handle\" rel=\"CLI.Error-static-method-handle\" class=\"docClass\">handling</a> function instead.</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/CLI.Error-static-property-ignore\" rel=\"CLI.Error-static-property-ignore\" class=\"docClass\">CLI.Error.ignore</a> = true;\n</code></pre>\n<p>Defaults to: <code>false</code></p></div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-handle' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI.Error'>CLI.Error</span><br/><a href='source/Error.html#CLI-Error-static-method-handle' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI.Error-static-method-handle' class='name expandable'>handle</a>( <span class='pre'>err</span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Globally handle any Ext errors that may be raised, optionally providing custom logic to\nhandle different errors indiv...</div><div class='long'><p>Globally handle any Ext errors that may be raised, optionally providing custom logic to\nhandle different errors individually. Return true from the function to bypass throwing the\nerror to the browser, otherwise the error will be thrown and execution will halt.</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/CLI.Error-static-method-handle\" rel=\"CLI.Error-static-method-handle\" class=\"docClass\">CLI.Error.handle</a> = function(err) {\n    if (err.someProperty == 'NotReallyAnError') {\n        // maybe log something to the application here if applicable\n        return true;\n    }\n    // any non-true return value (including none) will cause the error to be thrown\n}\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>err</span> : Object<div class='sub-desc'><p>The error being raised. It will contain any attributes that were originally\nraised with it, plus properties about the method and class from which the error originated\n(if raised from a class that uses the Class System).</p>\n</div></li></ul></div></div></div><div id='static-method-raise' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI.Error'>CLI.Error</span><br/><a href='source/Error.html#CLI-Error-static-method-raise' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI.Error-static-method-raise' class='name expandable'>raise</a>( <span class='pre'>err</span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Raise an error that can include additional data and supports automatic console logging if available. ...</div><div class='long'><p>Raise an error that can include additional data and supports automatic console logging if available.\nYou can pass a string error message or an object with the <code>msg</code> attribute which will be used as the\nerror message. The object can contain any other name-value attributes (or objects) to be logged\nalong with the error.</p>\n\n<p>Note that after displaying the error message a JavaScript error will ultimately be thrown so that\nexecution will halt.</p>\n\n<p>Example usage:</p>\n\n<pre><code><a href=\"#!/api/CLI.Error-static-method-raise\" rel=\"CLI.Error-static-method-raise\" class=\"docClass\">CLI.Error.raise</a>('A simple string error message');\n\n// or...\n\n<a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('CLI.Foo', {\n    doSomething: function(option){\n        if (someCondition === false) {\n            <a href=\"#!/api/CLI.Error-static-method-raise\" rel=\"CLI.Error-static-method-raise\" class=\"docClass\">CLI.Error.raise</a>({\n                msg: 'You cannot do that!',\n                option: option,   // whatever was passed into the method\n                'error code': 100 // other arbitrary info\n            });\n        }\n    }\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>err</span> : String/Object<div class='sub-desc'><p>The error message string, or an object containing the attribute \"msg\" that will be\nused as the error message. Any other data included in the object will also be logged to the browser console,\nif available.</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});