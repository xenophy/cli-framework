Ext.data.JsonP.CLI({"tagname":"class","name":"CLI","autodetected":{},"files":[{"filename":"CLI.js","href":"CLI.html#CLI"}],"singleton":true,"members":[{"name":"emptyFn","tagname":"property","owner":"CLI","id":"property-emptyFn","meta":{}},{"name":"emptyString","tagname":"property","owner":"CLI","id":"property-emptyString","meta":{}},{"name":"privateFn","tagname":"property","owner":"CLI","id":"property-privateFn","meta":{}},{"name":"apply","tagname":"method","owner":"CLI","id":"method-apply","meta":{}},{"name":"applyIf","tagname":"method","owner":"CLI","id":"method-applyIf","meta":{}},{"name":"clone","tagname":"method","owner":"CLI","id":"method-clone","meta":{}},{"name":"create","tagname":"method","owner":"CLI","id":"method-create","meta":{}},{"name":"createByAlias","tagname":"method","owner":"CLI","id":"method-createByAlias","meta":{}},{"name":"createWidget","tagname":"method","owner":"CLI","id":"method-createWidget","meta":{"deprecated":{"text":"<p>Use <a href=\"#!/api/CLI-method-widget\" rel=\"CLI-method-widget\" class=\"docClass\">widget</a> instead.</p>\n"},"private":true}},{"name":"define","tagname":"method","owner":"CLI","id":"method-define","meta":{}},{"name":"getClass","tagname":"method","owner":"CLI","id":"method-getClass","meta":{}},{"name":"getClassName","tagname":"method","owner":"CLI","id":"method-getClassName","meta":{}},{"name":"isArray","tagname":"method","owner":"CLI","id":"method-isArray","meta":{}},{"name":"isBoolean","tagname":"method","owner":"CLI","id":"method-isBoolean","meta":{}},{"name":"isDate","tagname":"method","owner":"CLI","id":"method-isDate","meta":{}},{"name":"isDefined","tagname":"method","owner":"CLI","id":"method-isDefined","meta":{}},{"name":"isEmpty","tagname":"method","owner":"CLI","id":"method-isEmpty","meta":{}},{"name":"isFunction","tagname":"method","owner":"CLI","id":"method-isFunction","meta":{}},{"name":"isIterable","tagname":"method","owner":"CLI","id":"method-isIterable","meta":{}},{"name":"isMSDate","tagname":"method","owner":"CLI","id":"method-isMSDate","meta":{}},{"name":"isNumber","tagname":"method","owner":"CLI","id":"method-isNumber","meta":{}},{"name":"isNumeric","tagname":"method","owner":"CLI","id":"method-isNumeric","meta":{}},{"name":"isObject","tagname":"method","owner":"CLI","id":"method-isObject","meta":{}},{"name":"isPrimitive","tagname":"method","owner":"CLI","id":"method-isPrimitive","meta":{}},{"name":"isString","tagname":"method","owner":"CLI","id":"method-isString","meta":{}},{"name":"iterate","tagname":"method","owner":"CLI","id":"method-iterate","meta":{}},{"name":"namespace","tagname":"method","owner":"CLI","id":"method-namespace","meta":{}},{"name":"now","tagname":"method","owner":"CLI","id":"method-now","meta":{}},{"name":"ns","tagname":"method","owner":"CLI","id":"method-ns","meta":{}},{"name":"override","tagname":"method","owner":"CLI","id":"method-override","meta":{}},{"name":"typeOf","tagname":"method","owner":"CLI","id":"method-typeOf","meta":{}},{"name":"valueFrom","tagname":"method","owner":"CLI","id":"method-valueFrom","meta":{}},{"name":"widget","tagname":"method","owner":"CLI","id":"method-widget","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-CLI","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/CLI.html#CLI' target='_blank'>CLI.js</a></div></pre><div class='doc-contents'>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div id='property-emptyFn' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/CLI.html#CLI-property-emptyFn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-property-emptyFn' class='name expandable'>emptyFn</a> : Function<span class=\"signature\"></span></div><div class='description'><div class='short'><p>A reusable empty function.</p>\n</div><div class='long'><p>A reusable empty function.</p>\n</div></div></div><div id='property-emptyString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/CLI.html#CLI-property-emptyString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-property-emptyString' class='name expandable'>emptyString</a> : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>A zero length string which will pass a truth test. ...</div><div class='long'><p>A zero length string which will pass a truth test. Useful for passing to methods\nwhich use a truth test to reject <i>falsy</i> values where a string value must be cleared.</p>\n</div></div></div><div id='property-privateFn' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/CLI.html#CLI-property-privateFn' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-property-privateFn' class='name expandable'>privateFn</a> : Function<span class=\"signature\"></span></div><div class='description'><div class='short'>A reusable empty function for use as privates members. ...</div><div class='long'><p>A reusable empty function for use as <code>privates</code> members.</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('MyClass', {\n     nothing: <a href=\"#!/api/CLI-property-emptyFn\" rel=\"CLI-property-emptyFn\" class=\"docClass\">CLI.emptyFn</a>,\n\n     privates: {\n         privateNothing: <a href=\"#!/api/CLI-property-privateFn\" rel=\"CLI-property-privateFn\" class=\"docClass\">CLI.privateFn</a>\n     }\n });\n</code></pre>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-apply' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/CLI.html#CLI-method-apply' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-apply' class='name expandable'>apply</a>( <span class='pre'>object, config, [defaults]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Copies all the properties of config to the specified object. ...</div><div class='long'><p>Copies all the properties of <code>config</code> to the specified <code>object</code>. There are two levels\nof defaulting supported:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-apply\" rel=\"CLI-method-apply\" class=\"docClass\">CLI.apply</a>(obj, { a: 1 }, { a: 2 });\n //obj.a === 1\n\n <a href=\"#!/api/CLI-method-apply\" rel=\"CLI-method-apply\" class=\"docClass\">CLI.apply</a>(obj, {  }, { a: 2 });\n //obj.a === 2\n</code></pre>\n\n<p>Note that if recursive merging and cloning without referencing the original objects\nor arrays is needed, use CLI.Object.merge instead.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The receiver of the properties.</p>\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The primary source of the properties.</p>\n</div></li><li><span class='pre'>defaults</span> : Object (optional)<div class='sub-desc'><p>An object that will also be applied for default values.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns <code>object</code>.</p>\n</div></li></ul></div></div></div><div id='method-applyIf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-applyIf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-applyIf' class='name expandable'>applyIf</a>( <span class='pre'>object, config</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Copies all the properties of config to object if they don't already exist. ...</div><div class='long'><p>Copies all the properties of config to object if they don't already exist.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The receiver of the properties</p>\n</div></li><li><span class='pre'>config</span> : Object<div class='sub-desc'><p>The source of the properties</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>returns obj</p>\n</div></li></ul></div></div></div><div id='method-clone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-clone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-clone' class='name expandable'>clone</a>( <span class='pre'>item</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Clone simple variables including array, {}-like objects, DOM nodes and Date without keeping the old reference. ...</div><div class='long'><p>Clone simple variables including array, {}-like objects, DOM nodes and Date without keeping the old reference.\nA reference for the object itself is returned if it's not a direct decendant of Object. For model cloning,\nsee Model.copy.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>item</span> : Object<div class='sub-desc'><p>The variable to clone</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>clone</p>\n</div></li></ul></div></div></div><div id='method-create' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-create' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-create' class='name expandable'>create</a>( <span class='pre'>[name], [args]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Instantiate a class by either full name, alias or alternate name. ...</div><div class='long'><p>Instantiate a class by either full name, alias or alternate name.</p>\n\n<p>If <a href=\"#!/api/CLI.Loader\" rel=\"CLI.Loader\" class=\"docClass\">CLI.Loader</a> is enabled and the class has\nnot been defined yet, it will attempt to load the class via synchronous loading.</p>\n\n<p>For example, all these three lines return the same result:</p>\n\n<pre><code> // xtype\n var window = <a href=\"#!/api/CLI-method-create\" rel=\"CLI-method-create\" class=\"docClass\">CLI.create</a>({\n     xtype: 'window',\n     width: 600,\n     height: 800,\n     ...\n });\n\n // alias\n var window = <a href=\"#!/api/CLI-method-create\" rel=\"CLI-method-create\" class=\"docClass\">CLI.create</a>('widget.window', {\n     width: 600,\n     height: 800,\n     ...\n });\n\n // alternate name\n var window = <a href=\"#!/api/CLI-method-create\" rel=\"CLI-method-create\" class=\"docClass\">CLI.create</a>('CLI.Window', {\n     width: 600,\n     height: 800,\n     ...\n });\n\n // full class name\n var window = <a href=\"#!/api/CLI-method-create\" rel=\"CLI-method-create\" class=\"docClass\">CLI.create</a>('CLI.window.Window', {\n     width: 600,\n     height: 800,\n     ...\n });\n\n // single object with xclass property:\n var window = <a href=\"#!/api/CLI-method-create\" rel=\"CLI-method-create\" class=\"docClass\">CLI.create</a>({\n     xclass: 'CLI.window.Window', // any valid value for 'name' (above)\n     width: 600,\n     height: 800,\n     ...\n });\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String (optional)<div class='sub-desc'><p>The class name or alias. Can be specified as <code>xclass</code>\nproperty if only one object parameter is specified.</p>\n</div></li><li><span class='pre'>args</span> : Object... (optional)<div class='sub-desc'><p>Additional arguments after the name will be passed to\nthe class' constructor.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>instance</p>\n</div></li></ul></div></div></div><div id='method-createByAlias' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-createByAlias' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-createByAlias' class='name expandable'>createByAlias</a>( <span class='pre'>alias, args</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Instantiate a class by its alias. ...</div><div class='long'><p>Instantiate a class by its alias. This is usually invoked by the\nshorthand <a href=\"#!/api/CLI-method-createByAlias\" rel=\"CLI-method-createByAlias\" class=\"docClass\">createByAlias</a>.</p>\n\n<p>If <a href=\"#!/api/CLI.Loader\" rel=\"CLI.Loader\" class=\"docClass\">CLI.Loader</a> is enabled and the class\nhas not been defined yet, it will attempt to load the class via synchronous\nloading.</p>\n\n<pre><code>var window = <a href=\"#!/api/CLI-method-createByAlias\" rel=\"CLI-method-createByAlias\" class=\"docClass\">CLI.createByAlias</a>('widget.window', { width: 600, height: 800 });\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>alias</span> : String<div class='sub-desc'>\n</div></li><li><span class='pre'>args</span> : Object...<div class='sub-desc'><p>Additional arguments after the alias will be passed to the\nclass constructor.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>instance</p>\n</div></li></ul></div></div></div><div id='method-createWidget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-createWidget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-createWidget' class='name expandable'>createWidget</a>( <span class='pre'></span> )<span class=\"signature\"><span class='deprecated' >deprecated</span><span class='private' >private</span></span></div><div class='description'><div class='short'>Old name for widget. ...</div><div class='long'><p>Old name for <a href=\"#!/api/CLI-method-widget\" rel=\"CLI-method-widget\" class=\"docClass\">widget</a>.</p>\n        <div class='rounded-box deprecated-box deprecated-tag-box'>\n        <p>This method has been <strong>deprected</strong> </p>\n        <p>Use <a href=\"#!/api/CLI-method-widget\" rel=\"CLI-method-widget\" class=\"docClass\">widget</a> instead.</p>\n\n        </div>\n</div></div></div><div id='method-define' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-define' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-define' class='name expandable'>define</a>( <span class='pre'>className, data, [createdFn]</span> ) : <a href=\"#!/api/CLI.Base\" rel=\"CLI.Base\" class=\"docClass\">CLI.Base</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Defines a class or override. ...</div><div class='long'><p>Defines a class or override. A basic class is defined like this:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('My.awesome.Class', {\n     someProperty: 'something',\n\n     someMethod: function(s) {\n         alert(s + this.someProperty);\n     }\n\n     ...\n });\n\n var obj = new My.awesome.Class();\n\n obj.someMethod('Say '); // alerts 'Say something'\n</code></pre>\n\n<p>To create an anonymous class, pass <code>null</code> for the <code>className</code>:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>(null, {\n     constructor: function () {\n         // ...\n     }\n });\n</code></pre>\n\n<p>In some cases, it is helpful to create a nested scope to contain some private\nproperties. The best way to do this is to pass a function instead of an object\nas the second parameter. This function will be called to produce the class\nbody:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('MyApp.foo.Bar', function () {\n     var id = 0;\n\n     return {\n         nextId: function () {\n             return ++id;\n         }\n     };\n });\n</code></pre>\n\n<p><em>Note</em> that when using override, the above syntax will not override successfully, because\nthe passed function would need to be executed first to determine whether or not the result\nis an override or defining a new object. As such, an alternative syntax that immediately\ninvokes the function can be used:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('MyApp.override.BaseOverride', function () {\n     var counter = 0;\n\n     return {\n         override: 'CLI.Component',\n         logId: function () {\n             console.log(++counter, this.id);\n         }\n     };\n }());\n</code></pre>\n\n<p>When using this form of <code><a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a></code>, the function is passed a reference to its\nclass. This can be used as an efficient way to access any static properties you\nmay have:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('MyApp.foo.Bar', function (Bar) {\n     return {\n         statics: {\n             staticMethod: function () {\n                 // ...\n             }\n         },\n\n         method: function () {\n             return Bar.staticMethod();\n         }\n     };\n });\n</code></pre>\n\n<p>To define an override, include the <code>override</code> property. The content of an\noverride is aggregated with the specified class in order to extend or modify\nthat class. This can be as simple as setting default property values or it can\nextend and/or replace methods. This can also extend the statics of the class.</p>\n\n<p>One use for an override is to break a large class into manageable pieces.</p>\n\n<pre><code> // File: /src/app/Panel.js\n\n <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('My.app.Panel', {\n     extend: 'CLI.panel.Panel',\n     requires: [\n         'My.app.PanelPart2',\n         'My.app.PanelPart3'\n     ]\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls CLI.panel.Panel's constructor\n         //...\n     },\n\n     statics: {\n         method: function () {\n             return 'abc';\n         }\n     }\n });\n\n // File: /src/app/PanelPart2.js\n <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('My.app.PanelPart2', {\n     override: 'My.app.Panel',\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls My.app.Panel's constructor\n         //...\n     }\n });\n</code></pre>\n\n<p>Another use of overrides is to provide optional parts of classes that can be\nindependently required. In this case, the class may even be unaware of the\noverride altogether.</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('My.ux.CoolTip', {\n     override: 'CLI.tip.ToolTip',\n\n     constructor: function (config) {\n         this.callParent(arguments); // calls CLI.tip.ToolTip's constructor\n         //...\n     }\n });\n</code></pre>\n\n<p>The above override can now be required as normal.</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('My.app.App', {\n     requires: [\n         'My.ux.CoolTip'\n     ]\n });\n</code></pre>\n\n<p>Overrides can also contain statics:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('My.app.BarMod', {\n     override: 'CLI.foo.Bar',\n\n     statics: {\n         method: function (x) {\n             return this.callParent([x * 2]); // call CLI.foo.Bar.method\n         }\n     }\n });\n</code></pre>\n\n<p>Starting in version 4.2.2, overrides can declare their <code>compatibility</code> based\non the framework version or on versions of other packages. For details on the\nsyntax and options for these checks, see <code>CLI.checkVersion</code>.</p>\n\n<p>The simplest use case is to test framework version for compatibility:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('App.overrides.grid.Panel', {\n     override: 'CLI.grid.Panel',\n\n     compatibility: '4.2.2', // only if framework version is 4.2.2\n\n     //...\n });\n</code></pre>\n\n<p>An array is treated as an OR, so if any specs match, the override is\ncompatible.</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('App.overrides.some.Thing', {\n     override: 'Foo.some.Thing',\n\n     compatibility: [\n         '4.2.2',\n         'foo@1.0.1-1.0.2'\n     ],\n\n     //...\n });\n</code></pre>\n\n<p>To require that all specifications match, an object can be provided:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('App.overrides.some.Thing', {\n     override: 'Foo.some.Thing',\n\n     compatibility: {\n         and: [\n             '4.2.2',\n             'foo@1.0.1-1.0.2'\n         ]\n     },\n\n     //...\n });\n</code></pre>\n\n<p>Because the object form is just a recursive check, these can be nested:</p>\n\n<pre><code> <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>('App.overrides.some.Thing', {\n     override: 'Foo.some.Thing',\n\n     compatibility: {\n         and: [\n             '4.2.2',  // exactly version 4.2.2 of the framework *AND*\n             {\n                 // either (or both) of these package specs:\n                 or: [\n                     'foo@1.0.1-1.0.2',\n                     'bar@3.0+'\n                 ]\n             }\n         ]\n     },\n\n     //...\n });\n</code></pre>\n\n<p>IMPORTANT: An override is only included in a build if the class it overrides is\nrequired. Otherwise, the override, like the target class, is not included. In\nSencha Cmd v4, the <code>compatibility</code> declaration can likewise be used to remove\nincompatible overrides from a build.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>className</span> : String<div class='sub-desc'><p>The class name to create in string dot-namespaced format, for example:\n'My.very.awesome.Class', 'FeedViewer.plugin.CoolPager'\nIt is highly recommended to follow this simple convention:\n - The root and the class name are 'CamelCased'\n - Everything else is lower-cased\nPass <code>null</code> to create an anonymous class.</p>\n</div></li><li><span class='pre'>data</span> : Object<div class='sub-desc'><p>The key - value pairs of properties to apply to this class. Property names can be of any valid\nstrings, except those in the reserved listed below:\n - <code>mixins</code>\n - <code>statics</code>\n - <code>config</code>\n - <code>alias</code>\n - <code>xtype</code> (for Components only)\n - <code>self</code>\n - <code>singleton</code>\n - <code>alternateClassName</code>\n - <code>override</code></p>\n</div></li><li><span class='pre'>createdFn</span> : Function (optional)<div class='sub-desc'><p>Callback to execute after the class is created, the execution scope of which\n(<code>this</code>) will be the newly created class itself.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/CLI.Base\" rel=\"CLI.Base\" class=\"docClass\">CLI.Base</a></span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-getClass' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-getClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-getClass' class='name expandable'>getClass</a>( <span class='pre'>object</span> ) : <a href=\"#!/api/CLI.Class\" rel=\"CLI.Class\" class=\"docClass\">CLI.Class</a><span class=\"signature\"></span></div><div class='description'><div class='short'>Get the class of the provided object; returns null if it's not an instance\nof any class created with CLI.define. ...</div><div class='long'><p>Get the class of the provided object; returns null if it's not an instance\nof any class created with <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>. This is usually invoked by the\nshorthand <a href=\"#!/api/CLI-method-getClass\" rel=\"CLI-method-getClass\" class=\"docClass\">getClass</a>.</p>\n\n<pre><code>var component = new CLI.Component();\n\n<a href=\"#!/api/CLI-method-getClass\" rel=\"CLI-method-getClass\" class=\"docClass\">CLI.getClass</a>(component); // returns CLI.Component\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'><a href=\"#!/api/CLI.Class\" rel=\"CLI.Class\" class=\"docClass\">CLI.Class</a></span><div class='sub-desc'><p>class</p>\n</div></li></ul></div></div></div><div id='method-getClassName' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-getClassName' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-getClassName' class='name expandable'>getClassName</a>( <span class='pre'>object</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Get the name of the class by its reference or its instance. ...</div><div class='long'><p>Get the name of the class by its reference or its instance. This is\nusually invoked by the shorthand <a href=\"#!/api/CLI-method-getClassName\" rel=\"CLI-method-getClassName\" class=\"docClass\">getClassName</a>.</p>\n\n<pre><code><a href=\"#!/api/CLI.ClassManager-method-getName\" rel=\"CLI.ClassManager-method-getName\" class=\"docClass\">CLI.ClassManager.getName</a>(CLI.Action); // returns \"CLI.Action\"\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : <a href=\"#!/api/CLI.Class\" rel=\"CLI.Class\" class=\"docClass\">CLI.Class</a>/Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'><p>className</p>\n</div></li></ul></div></div></div><div id='method-isArray' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isArray' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isArray' class='name expandable'>isArray</a>( <span class='pre'>target</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Array, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Array, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object<div class='sub-desc'><p>The target to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isBoolean' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isBoolean' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isBoolean' class='name expandable'>isBoolean</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a boolean. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a boolean.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isDate' class='name expandable'>isDate</a>( <span class='pre'>object</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Date object, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Date object, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object<div class='sub-desc'><p>The object to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isDefined' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isDefined' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isDefined' class='name expandable'>isDefined</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is defined. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is defined.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isEmpty' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isEmpty' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isEmpty' class='name expandable'>isEmpty</a>( <span class='pre'>value, [allowEmptyString]</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is empty, false otherwise. ...</div><div class='long'><p>Returns true if the passed value is empty, false otherwise. The value is deemed to be empty if it is either:</p>\n\n<ul>\n<li><code>null</code></li>\n<li><code>undefined</code></li>\n<li>a zero-length array</li>\n<li>a zero-length string (Unless the <code>allowEmptyString</code> parameter is set to <code>true</code>)</li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li><li><span class='pre'>allowEmptyString</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> to allow empty strings.</p>\n<p>Defaults to: <code>false</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isFunction' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isFunction' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isFunction' class='name expandable'>isFunction</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Function, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Function, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isIterable' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isIterable' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isIterable' class='name expandable'>isIterable</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is iterable, that is, if elements of it are addressable using array\nnotation with nu...</div><div class='long'><p>Returns <code>true</code> if the passed value is iterable, that is, if elements of it are addressable using array\nnotation with numeric indices, <code>false</code> otherwise.</p>\n\n<p>Arrays and function <code>arguments</code> objects are iterable. Also HTML collections such as <code>NodeList</code> and `HTMLCollection'\nare iterable.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isMSDate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isMSDate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isMSDate' class='name expandable'>isMSDate</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns 'true' if the passed value is a String that matches the MS Date JSON\nencoding format. ...</div><div class='long'><p>Returns 'true' if the passed value is a String that matches the MS Date JSON\nencoding format.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : String<div class='sub-desc'><p>The string to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isNumber' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isNumber' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isNumber' class='name expandable'>isNumber</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a number. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a number. Returns <code>false</code> for non-finite numbers.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isNumeric' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isNumeric' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isNumeric' class='name expandable'>isNumeric</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Validates that a value is numeric. ...</div><div class='long'><p>Validates that a value is numeric.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>Examples: 1, '1', '2.34'</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>True if numeric, false otherwise</p>\n</div></li></ul></div></div></div><div id='method-isObject' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isObject' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isObject' class='name expandable'>isObject</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript Object, false otherwise. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript Object, <code>false</code> otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isPrimitive' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isPrimitive' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isPrimitive' class='name expandable'>isPrimitive</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns true if the passed value is a JavaScript 'primitive', a string, number\nor boolean. ...</div><div class='long'><p>Returns <code>true</code> if the passed value is a JavaScript 'primitive', a string, number\nor boolean.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-isString' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-isString' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-isString' class='name expandable'>isString</a>( <span class='pre'>value</span> ) : Boolean<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns trueif the passed value is a string. ...</div><div class='long'><p>Returns <code>true</code>if the passed value is a string.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-iterate' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-iterate' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-iterate' class='name expandable'>iterate</a>( <span class='pre'>object, fn, [scope]</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Iterates either an array or an object. ...</div><div class='long'><p>Iterates either an array or an object. This method delegates to\nCLI.Array.each if the given value is iterable, and CLI.Object.each otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>object</span> : Object/Array<div class='sub-desc'><p>The object or array to be iterated.</p>\n</div></li><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>The function to be called for each iteration. See and CLI.Array.each and\nCLI.Object.each for detailed lists of arguments passed to this function depending on the given object\ntype that is being iterated.</p>\n</div></li><li><span class='pre'>scope</span> : Object (optional)<div class='sub-desc'><p>The scope (<code>this</code> reference) in which the specified function is executed.\nDefaults to the object being iterated itself.</p>\n</div></li></ul></div></div></div><div id='method-namespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-namespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-namespace' class='name expandable'>namespace</a>( <span class='pre'>namespaces</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Creates namespaces to be used for scoping variables and classes so that they are not global. ...</div><div class='long'><p>Creates namespaces to be used for scoping variables and classes so that they are not global.\nSpecifying the last node of a namespace implicitly creates all other nodes. Usage:</p>\n\n<pre><code><a href=\"#!/api/CLI-method-namespace\" rel=\"CLI-method-namespace\" class=\"docClass\">CLI.namespace</a>('Company', 'Company.data');\n\n// equivalent and preferable to the above syntax\n<a href=\"#!/api/CLI-method-ns\" rel=\"CLI-method-ns\" class=\"docClass\">CLI.ns</a>('Company.data');\n\nCompany.Widget = function() { ... };\n\nCompany.data.CustomStore = function(config) { ... };\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespaces</span> : String...<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The namespace object.\n(If multiple arguments are passed, this will be the last namespace created)</p>\n\n</div></li></ul></div></div></div><div id='method-now' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-now' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-now' class='name expandable'>now</a>( <span class='pre'></span> ) : Number<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the current timestamp. ...</div><div class='long'><p>Returns the current timestamp.</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Number</span><div class='sub-desc'><p>Milliseconds since UNIX epoch.</p>\n</div></li></ul></div></div></div><div id='method-ns' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-ns' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-ns' class='name expandable'>ns</a>( <span class='pre'>namespaces</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenient alias for CLI.namespace. ...</div><div class='long'><p>Convenient alias for <a href=\"#!/api/CLI-method-namespace\" rel=\"CLI-method-namespace\" class=\"docClass\">CLI.namespace</a>.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>namespaces</span> : String...<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The namespace object.\n(If multiple arguments are passed, this will be the last namespace created)</p>\n\n</div></li></ul></div></div></div><div id='method-override' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-override' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-override' class='name expandable'>override</a>( <span class='pre'>target, overrides</span> )<span class=\"signature\"></span></div><div class='description'><div class='short'>Overrides members of the specified target with the given values. ...</div><div class='long'><p>Overrides members of the specified <code>target</code> with the given values.</p>\n\n<p>If the <code>target</code> is a class declared using <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>, the\n<code>override</code> method of that class is called (see <a href=\"#!/api/CLI.Base-static-method-override\" rel=\"CLI.Base-static-method-override\" class=\"docClass\">CLI.Base.override</a>) given\nthe <code>overrides</code>.</p>\n\n<p>If the <code>target</code> is a function, it is assumed to be a constructor and the contents\nof <code>overrides</code> are applied to its <code>prototype</code> using <a href=\"#!/api/CLI-method-apply\" rel=\"CLI-method-apply\" class=\"docClass\">CLI.apply</a>.</p>\n\n<p>If the <code>target</code> is an instance of a class declared using <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a>,\nthe <code>overrides</code> are applied to only that instance. In this case, methods are\nspecially processed to allow them to use <a href=\"#!/api/CLI.Base-method-callParent\" rel=\"CLI.Base-method-callParent\" class=\"docClass\">CLI.Base.callParent</a>.</p>\n\n<pre><code> var panel = new CLI.Panel({ ... });\n\n <a href=\"#!/api/CLI-method-override\" rel=\"CLI-method-override\" class=\"docClass\">CLI.override</a>(panel, {\n     initComponent: function () {\n         // extra processing...\n\n         this.callParent();\n     }\n });\n</code></pre>\n\n<p>If the <code>target</code> is none of these, the <code>overrides</code> are applied to the <code>target</code>\nusing <a href=\"#!/api/CLI-method-apply\" rel=\"CLI-method-apply\" class=\"docClass\">CLI.apply</a>.</p>\n\n<p>Please refer to <a href=\"#!/api/CLI-method-define\" rel=\"CLI-method-define\" class=\"docClass\">CLI.define</a> and <a href=\"#!/api/CLI.Base-static-method-override\" rel=\"CLI.Base-static-method-override\" class=\"docClass\">CLI.Base.override</a> for\nfurther details.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>target</span> : Object<div class='sub-desc'><p>The target to override.</p>\n</div></li><li><span class='pre'>overrides</span> : Object<div class='sub-desc'><p>The properties to add or replace on <code>target</code>.</p>\n</div></li></ul></div></div></div><div id='method-typeOf' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-typeOf' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-typeOf' class='name expandable'>typeOf</a>( <span class='pre'>value</span> ) : String<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the type of the given variable in string format. ...</div><div class='long'><p>Returns the type of the given variable in string format. List of possible values are:</p>\n\n<ul>\n<li><code>undefined</code>: If the given value is <code>undefined</code></li>\n<li><code>null</code>: If the given value is <code>null</code></li>\n<li><code>string</code>: If the given value is a string</li>\n<li><code>number</code>: If the given value is a number</li>\n<li><code>boolean</code>: If the given value is a boolean value</li>\n<li><code>date</code>: If the given value is a <code>Date</code> object</li>\n<li><code>function</code>: If the given value is a function reference</li>\n<li><code>object</code>: If the given value is an object</li>\n<li><code>array</code>: If the given value is an array</li>\n<li><code>regexp</code>: If the given value is a regular expression</li>\n</ul>\n\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>String</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='method-valueFrom' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/Util.html#CLI-method-valueFrom' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-valueFrom' class='name expandable'>valueFrom</a>( <span class='pre'>value, defaultValue, [allowBlank]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Returns the given value itself if it's not empty, as described in isEmpty; returns the default\nvalue (second argument...</div><div class='long'><p>Returns the given value itself if it's not empty, as described in <a href=\"#!/api/CLI-method-isEmpty\" rel=\"CLI-method-isEmpty\" class=\"docClass\">isEmpty</a>; returns the default\nvalue (second argument) otherwise.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>value</span> : Object<div class='sub-desc'><p>The value to test.</p>\n</div></li><li><span class='pre'>defaultValue</span> : Object<div class='sub-desc'><p>The value to return if the original value is empty.</p>\n</div></li><li><span class='pre'>allowBlank</span> : Boolean (optional)<div class='sub-desc'><p><code>true</code> to allow zero length strings to qualify as non-empty.</p>\n<p>Defaults to: <code>false</code></p></div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>value, if non-empty, else defaultValue.</p>\n</div></li></ul></div></div></div><div id='method-widget' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='CLI'>CLI</span><br/><a href='source/ClassManager.html#CLI-method-widget' target='_blank' class='view-source'>view source</a></div><a href='#!/api/CLI-method-widget' class='name expandable'>widget</a>( <span class='pre'>[name], [config]</span> ) : Object<span class=\"signature\"></span></div><div class='description'><div class='short'>Convenient shorthand to create a widget by its xtype or a config object. ...</div><div class='long'><p>Convenient shorthand to create a widget by its xtype or a config object.</p>\n\n<pre><code> var button = <a href=\"#!/api/CLI-method-widget\" rel=\"CLI-method-widget\" class=\"docClass\">CLI.widget</a>('button'); // Equivalent to <a href=\"#!/api/CLI-method-create\" rel=\"CLI-method-create\" class=\"docClass\">CLI.create</a>('widget.button');\n\n var panel = <a href=\"#!/api/CLI-method-widget\" rel=\"CLI-method-widget\" class=\"docClass\">CLI.widget</a>('panel', { // Equivalent to <a href=\"#!/api/CLI-method-create\" rel=\"CLI-method-create\" class=\"docClass\">CLI.create</a>('widget.panel')\n     title: 'Panel'\n });\n\n var grid = <a href=\"#!/api/CLI-method-widget\" rel=\"CLI-method-widget\" class=\"docClass\">CLI.widget</a>({\n     xtype: 'grid',\n     ...\n });\n</code></pre>\n\n<p>If a component instance is passed, it is simply returned.</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>name</span> : String (optional)<div class='sub-desc'><p>The xtype of the widget to create.</p>\n</div></li><li><span class='pre'>config</span> : Object (optional)<div class='sub-desc'><p>The configuration object for the widget constructor.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>The widget instance</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});